/**
 * Module dependencies.
 */
const app = require('../server/app');
const debug = require('debug')('nodequiz');
const http = require('http');
const config = require('../server/helpers/config');
const logger = require('../server/helpers/logger');


/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(config.web.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
      // named pipe
      return val;
  }

  if (port >= 0) {
      // port number
      return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
      throw error;
  }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  logger.debug('Bind value in www file: ' + bind);

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.debug(bind + ' requires elevated privileges');
      //console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.debug(bind + ' is already in use');
      //console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  logger.debug('Listening on ' + bind);
  //debug('Listening on ' + bind);
}
